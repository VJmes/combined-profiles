#!/bin/bash
# -------------------------------------------------
#
#           Network functions file
#
#           Written: James Varoutsos
#   Date: 19-Aug-2021        Version: 1.1
#
#   1.0 - Initial (Added bulk-DNS)
#   1.1 - Added cleanClone
#
# -------------------------------------------------

#
#   (Requires Linux) Query's the current default-route's LAN IP address
#
alias queryLanIP="ip route get 1.1.1.1 | cut -d ' ' -f 7 | head -1"

#
#   Perform external check of current WAN IP address
#
function queryWanIP {
    checkUrl="http://checkip.dyndns.com/"
    wanIP=$(curl -s $checkUrl | grep -oE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}")
    wanZone=$(dig -x $wanIP +short | sed 's/.$//')
    echo "$wanIP ($wanZone)"
}

#
#   Dig-based iteratation through a given file
#
function queryBulkDns {
    queryTypes=("A" "AAAA" "NS" "SOA" "TXT" "MX");

    if [[ -f "$2" ]]; then
        for type in $queryTypes; do
            [[ $type = $(echo "$1" | tr "[:lower:]" "[:upper:]") ]] && valType=1
        done
        if [ ! -v "$valType" ]; then
            while read zone; do
                rm -rf dns-results.csv 2> /dev/null
                echo "$zone,$(dig 1.1.1.1 $zone $1 +short | tr '\n' ',')" | sed 's/,$//' >> dns-results.csv
            done < "$2"
        else
            echo "Invalid type!"
        fi
    else
        echo "Invalid file!"
    fi
}

#
#   Checks whether an IP address is contained within a subnet
#
function checkInSubnet {
    if [ ! -f /usr/bin/python3 ]; then
        echo "Python not found"
    fi

    python3 -c "import ipaddress, sys; sys.exit(ipaddress.ip_address('$1') in ipaddress.ip_network('$2'))"

    if [ $? -eq 1 ]; then
        echo "Yes - $1 exists within $2"
        return 1
    else
        echo "No - $1 does not exist within $2"
        return 0
    fi
}

#
#   Perform a git clone & clean-up any pulled metadata
#
function cleanClone {
    echo $1
    if [ ! -z "$1" ]; then
        git clone --depth=1 $1
        if [ $? ]; then
            cd $(basename ${1%.*})
            rm -rf .git .github README README.md LICENSE LICENSE.md .gitignore
        else
            echo "Unable to successfully git clone '$1'"
        fi
    else
        echo "No URL given"
    fi
}

alias gitClean="cleanClone"

function .netfuncsrc-help {
    fcName=".netfuncsrc"
    fcDescription="[Inbuilt] Provides common networking functions and shortcuts"
    fcPre="\t\033[1;36m"
    fcPost="\033[0m: "

    echo -e "\e[38;5;012m${fcName}\033[0m :: \e[38;5;004m${fcDescription}\033[0m
    ${fcPre}queryLanIP${fcPost}Query the LAN IP by using default route
    ${fcPre}queryWanIP${fcPost}Query the WAN IP via an external web-absed service
    ${fcPre}queryBulkDns [filename] [rr-type]${fcPost}Perform a simple bulk-DNS query
    ${fcPre}checkInSubnet [ip-addr] [subnet]${fcPost}Check whether an IP address falls within a given subnet range
    ${fcPre}cleanClone [git-url]${fcPost}Performs a local
    "
}