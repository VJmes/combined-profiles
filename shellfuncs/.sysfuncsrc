#!/bin/bash
# -------------------------------------------------
#
#            System functions file
#
#           Written: James Varoutsos
#   Date: 25-Aug-2021        Version: 1.0
#
#   1.0 - Initial (Added Zippy)
#
# -------------------------------------------------

function archiveAuto {
    if [ -z "$2" ]; then
        typeLower=$(echo $2 | tr '[:upper:]' '[:lower:]')
    else
        echo "No type given"
        return 1
    fi
    if [ -d "$1" ]; then
        case $2 in
            zip)
                zip -r $(basename $1).zip $1
                ;;
            bz|bzip|bz2|tbz)
                tar -jcvf $(basename $1).tar.bz2 $1
                ;;
            gz|gzip|gz|tgz)
                tar -zcvf $(basename $1).tar.gz $1
                ;;
            tar|tz)
                tar -cvf $(basename $1).tar.gz $1
                ;;
            *)
                echo "Unknown type ($1)"
        esac
    else
        echo "$1 is an invalid directory"
    fi
}

alias zp="archiveAuto"
alias zippy="archiveAuto"

function extractAuto {
    if [ -f $1 ]; then
        case $2 in
            *.zip)
                unzip -r $1
                ;;
            *.bz|*.bzip|*.bz2|*.tbz)
                tar -jcvf $1
                ;;
            *.gz|*.gzip|*.gz|*.tgz)
                tar -zxvf $1
                ;;
            *.tar|*.tz)
                tar -xvf $1
                ;;
            *)
                echo "Unknown archive type, skipped ($1)"
        esac
    else
        echo "Unable to find file $1"
    fi
}

alias unzp="extractAuto"
alias unzippy="extractAuto"

# Overwriter
function ovwr { if [ -f "$1" ]; then rm -rf "$1"; vi -c 'startinsert' "$1"; \
    echo "Overwritten '$1'"; else echo "Nonexistant file '$1'"; fi; }
alias overwrite="ovwr"

# Rewriter
function rewr { if [ -f "$1" ]; then cp -rp "$1" "$1.$(date +'%H%M-%d%m%y').bkup" && rm -rf "$1"; \
    vi -c 'startinsert' "$1"; echo "Rewritten '$1'"; else echo "Nonexistant file '$1'"; fi; }
alias rewrite="rewr"

# Term-friendly hash shortcuts
function md5cli { echo -n "$1" | md5sum | cut -f 1 -d ' '; }
function sha1cli { echo -n "$1" | sha1sum | cut -f 1 -d ' '; }
function sha2cli { echo -n "$1" | sha256sum | cut -f 1 -d ' '; }
function sha3cli { echo -n "$1" | sha512sum | cut -f 1 -d ' '; }

# Encodables (Dev/null-ing errors because padding characters are hard)
function b64enc { echo -n "$1" | base64 2> /dev/null; }             # Encode
function b64dec { echo -n "$1" | base64 -d 2> /dev/null; echo; }    # Decode

alias reloadEnv=". $HOME/.bashrc"
alias reloadProfile=". $HOME/.bashrc"
alias reloadEnvironment=". $HOME/.bashrc"

function updateEnv {
    projName="dotfiles-funcs-confs"
    echo -e "$TC_NOTICE Fetching & reloading entire profile"
    [ -d "$HOME/${projName}/" ] && rm -rf "$HOME/${projName}/"
    git clone --quiet --recurse-submodules "https://github.com/VJmes/${projName}.git" \
        && echo -e "$TC_GOOD Combined profile repository successfully fetched"
    find "$HOME/${projName}/" \( -name ".git" -o -name ".gitignore" -o -name "README.md" -o -name ".gitmodules" \) -exec rm -rf {} +
    rsync -qav --progress "$HOME/${projName}/" "$HOME/" \
        && echo -e "$TC_GOOD Profile refreshed"
    sleep 2
    reloadEnv
}

alias updateEnvironment="updateEnv"
alias updateProfile="updateEnv"

alias fetchEnvironment="updateEnv"
alias fetchProfile="updateEnv"
alias fetechEnv="updateEnv"

function .sysfuncsrc-help {
    fcName=".sysfuncsrc"
    fcDescription="[Inbuilt] Provides common system functions and shortcuts"
    fcPre="\t\033[1;36m"
    fcPost="\033[0m: "

    echo -e "\e[38;5;012m${fcName}\033[0m :: \e[38;5;004m${fcDescription}\033[0m
    ${fcPre}archiveAuto [directory] [zip-type]${fcPost}Tar macro, compress directory with common-compression-types
    ${fcPre}extractAuto [directory] [zip-type]${fcPost}Extract directory with common-compression-types
    ${fcPre}reloadEnv${fcPost}Reload this environment
    ${fcPre}updateEnv${fcPost}Update this environment using the latest version from github
    ${fcPre}overwrite [file]${fcPost}Remove current file and open vi(m) with same filename
    ${fcPre}rewrite [file]${fcPost}Take a backup of current file and open vi(m) with the same filename
    ${fcPre}md5cli [value]${fcPost}Generate an MD5 hash of a given value
    ${fcPre}sha1cli [value]${fcPost}Generate an SHA1 hash of a given value
    ${fcPre}sha2cli [value]${fcPost}Generate an SHA256 hash of a given value
    ${fcPre}sha3cli [value]${fcPost}Generate an SHA512 hash of a given value
    ${fcPre}b64enc [value]${fcPost}Base64 encode a given value
    ${fcPre}b64dec [value]${fcPost}Base64 decode a given value
    "
}